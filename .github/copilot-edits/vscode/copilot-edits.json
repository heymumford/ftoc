{
  "ftoc.edits": {
    "version": "1.0.0",
    "edits": [
      {
        "name": "feature-file-create",
        "description": "Create a new Cucumber feature file with FTOC best practices",
        "filePattern": "**/*.feature",
        "prompt": "Create a Cucumber feature file for ${1:feature name} with priority ${2|P1,P2,P3|} and category ${3|API,UI,Integration,Unit,Performance,Security,Accessibility|}.",
        "template": "# This template creates a well-structured feature file\n@${2} @${3} @Regression\nFeature: ${1}\n\n  Background:\n    Given the system is ready for testing\n\n  Scenario: ${4:First scenario}\n    Given ${5:initial condition}\n    When ${6:action is performed}\n    Then ${7:expected result}",
        "examples": [
          "Create a Cucumber feature file for User Authentication with priority P1 and category Security.",
          "Create a Cucumber feature file for Performance Monitoring with priority P2 and category Performance."
        ]
      },
      {
        "name": "tag-refactor",
        "description": "Refactor tags in a feature file to follow FTOC standards",
        "filePattern": "**/*.feature",
        "prompt": "Refactor the tags in this feature file to follow FTOC standards with priority ${1|P1,P2,P3|} and add appropriate ${2|API,UI,Integration,Unit,Performance,Security,Accessibility|} tags.",
        "actions": {
          "replaceTags": true,
          "reorganizeTags": true,
          "addMissingTags": true,
          "removeRedundantTags": true
        },
        "examples": [
          "Refactor the tags in this feature file to follow FTOC standards with priority P1 and add appropriate API tags.",
          "Refactor the tags in this feature file to follow FTOC standards with priority P2 and add appropriate UI tags."
        ]
      },
      {
        "name": "scenario-outline-create",
        "description": "Create a scenario outline with examples table",
        "filePattern": "**/*.feature",
        "prompt": "Create a scenario outline for ${1:functionality} with ${2:number} examples.",
        "template": "  Scenario Outline: ${1} with different inputs\n    Given ${3:a user with <parameter>}\n    When ${4:action is performed}\n    Then ${5:result should be <result>}\n\n    Examples:\n      | parameter | result |\n      | value1   | expected1 |\n      | value2   | expected2 |",
        "examples": [
          "Create a scenario outline for login validation with 3 examples.",
          "Create a scenario outline for data transformation with 4 examples."
        ]
      },
      {
        "name": "report-config-create",
        "description": "Create a configuration for FTOC report generation",
        "filePattern": "**/*.json,**/*.yml,**/*.yaml",
        "prompt": "Create a configuration for generating FTOC reports in ${1|markdown,html,json,plain-text|} format with ${2|basic,detailed,summary|} verbosity.",
        "templates": {
          "json": "{\n  \"report\": {\n    \"format\": \"${1}\",\n    \"verbosity\": \"${2}\",\n    \"includeTags\": true,\n    \"includeStatistics\": true,\n    \"outputFile\": \"ftoc-report.${1}\",\n    \"filters\": {\n      \"includeTags\": [\"@Regression\"],\n      \"excludeTags\": [\"@WIP\", \"@Ignore\"]\n    }\n  }\n}",
          "yaml": "report:\n  format: ${1}\n  verbosity: ${2}\n  includeTags: true\n  includeStatistics: true\n  outputFile: ftoc-report.${1}\n  filters:\n    includeTags:\n      - \"@Regression\"\n    excludeTags:\n      - \"@WIP\"\n      - \"@Ignore\""
        },
        "examples": [
          "Create a configuration for generating FTOC reports in markdown format with detailed verbosity.",
          "Create a configuration for generating FTOC reports in json format with summary verbosity."
        ]
      },
      {
        "name": "formatter-create",
        "description": "Create a new formatter class for FTOC",
        "filePattern": "**/*.java",
        "prompt": "Create a formatter class for ${1:format name} output format.",
        "template": "package com.heymumford.ftoc.formatter;\n\nimport com.heymumford.ftoc.model.Feature;\nimport com.heymumford.ftoc.model.Scenario;\n\nimport java.util.List;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Formatter for ${1} output format.\n */\npublic class ${1}Formatter implements Formatter {\n    private static final Logger logger = LoggerFactory.getLogger(${1}Formatter.class);\n    \n    @Override\n    public String generate(List<Feature> features) {\n        logger.debug(\"Generating ${1} output for {} features\", features.size());\n        \n        StringBuilder sb = new StringBuilder();\n        // TODO: Implement ${1} format generation\n        \n        return sb.toString();\n    }\n}",
        "examples": [
          "Create a formatter class for CSV output format.",
          "Create a formatter class for XML output format."
        ]
      }
    ]
  }
}